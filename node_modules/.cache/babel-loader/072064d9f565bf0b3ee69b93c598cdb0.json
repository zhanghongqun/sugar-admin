{"remainingRequest":"/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/thread-loader/dist/cjs.js!/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/babel-loader/lib/index.js!/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhanghongqun/Desktop/github/sugar-admin/src/views/form/components/taskDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhanghongqun/Desktop/github/sugar-admin/src/views/form/components/taskDetail.vue","mtime":1599405780263},{"path":"/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/zhanghongqun/Desktop/github/sugar-admin/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MDinput from \"@/components/MDinput\";\nimport Sticky from \"@/components/Sticky\";\nimport { fetchTask, createTask } from \"@/api/task\";\nimport { getToken } from \"@/utils/auth\"; // import { userSearch } from '@/api/remoteSearch'\n\nvar defaultTask = {\n  status: \"\",\n  name: \"\",\n  // 任务名\n  description: \"\",\n  // 任务描述\n  reward: \"\",\n  // 任务奖励\n  searchKeyword: \"\",\n  //搜索关键字\n  productPic: \"\",\n  orderPic: \"\",\n  introducePic: \"\",\n  displayTime: undefined,\n  // 前台展示时间\n  id: undefined,\n  platforms: [\"a-platform\"],\n  comment_disabled: false\n};\nexport default {\n  name: \"taskDetail\",\n  components: {\n    Sticky: Sticky,\n    MDinput: MDinput\n  },\n  props: {\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    var validateRequire = function validateRequire(rule, value, callback) {\n      if (value === \"\") {\n        _this.$message({\n          message: rule.field + \"为必传项\",\n          type: \"error\"\n        });\n\n        callback(null);\n      } else {\n        callback();\n      }\n    };\n\n    var validateSourceUri = function validateSourceUri(rule, value, callback) {\n      if (value) {\n        if (validateURL(value)) {\n          callback();\n        } else {\n          _this.$message({\n            message: \"外链url填写不正确\",\n            type: \"error\"\n          });\n\n          callback(null);\n        }\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      productPics: [],\n      orderPics: [],\n      introducePics: [],\n      headers: {\n        Authorization: \"Bearer \" + getToken()\n      },\n      postTask: Object.assign({}, defaultTask),\n      fetchSuccess: true,\n      loading: false,\n      limit: 1,\n      rules: _defineProperty({\n        pictureUrl: [{\n          validator: validateRequire\n        }],\n        name: [{\n          validator: validateRequire\n        }],\n        description: [{\n          validator: validateRequire\n        }]\n      }, \"pictureUrl\", [{\n        validator: validateSourceUri,\n        trigger: \"blur\"\n      }])\n    };\n  },\n  computed: {\n    contentShortLength: function contentShortLength() {\n      return this.postTask.description.length;\n    }\n  },\n  created: function created() {\n    if (this.isEdit) {\n      this.fetchData();\n    } else {\n      this.postTask = Object.assign({}, defaultTask);\n    }\n  },\n  methods: {\n    handleIntroducePictureCardPreview: function handleIntroducePictureCardPreview(file) {// this.dialogImageUrl = file.url;\n      // this.dialogVisible = true;\n    },\n    handleIntroducePictureSuccess: function handleIntroducePictureSuccess(response, file, fileList) {\n      this.postTask.introducePic = response;\n    },\n    handleProductPictureCardPreview: function handleProductPictureCardPreview(file) {// this.dialogImageUrl = file.url;\n      // this.dialogVisible = true;\n    },\n    handleProductPictureSuccess: function handleProductPictureSuccess(response, file, fileList) {\n      this.postTask.productPic = response;\n    },\n    handleOrderPictureCardPreview: function handleOrderPictureCardPreview(file) {// this.dialogImageUrl = file.url;\n      // this.dialogVisible = true;\n    },\n    handleOrderPictureSuccess: function handleOrderPictureSuccess(response, file, fileList) {\n      this.postTask.orderPic = response;\n    },\n    fetchData: function fetchData() {\n      var _this2 = this;\n\n      var id = this.$route.params.taskId;\n      fetchTask(id).then(function (response) {\n        _this2.productPics.push({\n          url: response.productPic\n        });\n\n        _this2.orderPics.push({\n          url: response.orderPic\n        });\n\n        _this2.introducePics.push({\n          url: response.introducePics\n        });\n\n        _this2.postTask = response;\n      }).catch(function (err) {\n        _this2.fetchSuccess = false;\n      });\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n\n      this.postTask.start = parseInt(this.postTask.start.getTime());\n      createTask(this.postTask).then(function (res) {\n        _this3.$router.push({\n          name: \"tasklist\"\n        });\n      }); // this.$refs.postTask.validate(valid => {\n      //   if (valid) {\n      //     this.loading = true;\n      //     this.$notify({\n      //       title: \"成功\",\n      //       message: \"发布文章成功\",\n      //       type: \"success\",\n      //       duration: 2000\n      //     });\n      //     this.postTask.status = \"published\";\n      //     this.loading = false;\n      //   } else {\n      //     console.log(\"error submit!!\");\n      //     return false;\n      //   }\n      // });\n    } // draftForm() {\n    //   if (\n    //     this.postTask.description.length === 0 ||\n    //     this.postTask.name.length === 0\n    //   ) {\n    //     this.$message({\n    //       message: \"请填写必要的标题和内容\",\n    //       type: \"warning\"\n    //     });\n    //     return;\n    //   }\n    //   this.$message({\n    //     message: \"保存成功\",\n    //     type: \"success\",\n    //     showClose: true,\n    //     duration: 1000\n    //   });\n    //   this.postTask.status = \"draft\";\n    // }\n\n  }\n};",null]}